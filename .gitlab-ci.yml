stages:
  - test_prep
  - test
  - build
  - publish
  - trigger_prep
  - trigger

variables:
  DOCKER_VERSION: "24.0.6"
  GOLANG_VERSION: "1.21.1"

  DOCKER_REPOSITORY: northerntechhq/nt-connect
  MULTIPLATFORM_BUILD: "true"
  MULTIPLATFORM_PLATFORMS: "linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7"

  GITHUB_STATUS_API_URL: "https://api.github.com/repos/NorthernTechHQ/$CI_PROJECT_NAME/statuses/$CI_COMMIT_SHA"

include:
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-golang-lint.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-golang-unittests-v2.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-commits.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-license.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-github-status-updates.yml'

build:docker:
  tags:
    - mender-qa-worker-generic-light
  stage: build
  needs: []
  variables:
    DOCKER_BUILDKIT: 1
  image: "docker:${DOCKER_VERSION}"
  services:
    - "docker:${DOCKER_VERSION}-dind"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "building ${CI_PROJECT_NAME} for ${DOCKER_BUILD_SERVICE_IMAGE}"
    - docker context create builder
    - docker buildx create builder --use --driver-opt network=host --buildkitd-flags '--debug --allow-insecure-entitlement network.host' --platform "$MULTIPLATFORM_PLATFORMS"
    - |-
      docker buildx build \
      --file ${DOCKER_DIR:-.}/${DOCKERFILE:-Dockerfile} \
      --build-arg GIT_COMMIT_TAG="${DOCKER_PUBLISH_COMMIT_TAG}" \
      --platform "$MULTIPLATFORM_PLATFORMS" \
      --provenance false \
      --output "type=oci,dest=image.oci" \
      ${DOCKER_DIR:-.}
  artifacts:
    paths:
      - image.oci
    expire_in: '1 week'

publish:docker:
  stage: publish
  rules:
  - if: '$CI_COMMIT_REF_NAME =~ /^main|staging|v[0-9]+\.[0-9]+\.[0-9](-[a-z0-9]+)?/'
    when: always
  dependencies:
    - build:docker
  image: quay.io/skopeo/stable:v1.3.1
  script:
    - skopeo auth -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD $DOCKER_REPOSITORY
    - skopeo copy --multi-arch all oci-archive://$(pwd)/image.oci docker://${DOCKER_REPOSITORY}:${CI_COMMIT_REF_NAME}
    - test "$CI_COMMIT_REF_NAME" = "main" &&
      skopeo copy --multi-arch all oci-archive://$(pwd)/image.oci docker://${DOCKER_REPOSITORY}:${CI_COMMIT_SHA}
    - echo "$CI_COMMIT_REF_NAME" | grep -qE 'v[0-9]+\.[0-9]+\.[0-9]+' &&
      skopeo copy --multi-arch all oci-archive://$(pwd)/image.oci docker://${DOCKER_REPOSITORY}:latest

test:unit:
  image: "golang:${GOLANG_VERSION}"
  stage: test
  before_script:
    - apt-get -qq update && apt-get install -yq $(cat deb-requirements.txt)
    # start the dbus service
    - service dbus start
